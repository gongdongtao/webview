{"version":3,"sources":["pages/PostMessages.js","pages/Main.js","AppRoutes.js","redux/reducers/home_reducer.js","redux/reducers/index.js","App.js","redux/store/configureStore.js","serviceWorker.js","index.js","redux/actions/home_action.js"],"names":["PostMessages","_this","this","window","addEventListener","e","setTimeout","message","info","JSON","stringify","detail","props","homeActions","setLoadingStatus","setHelloResult","children","React","Component","connect","state","loadingStatus","homeReducer","dispatch","bindActionCreators","Main","react_default","a","createElement","pages_PostMessages","spin","spinning","withRouter","Home","lazy","Promise","all","__webpack_require__","then","bind","Login","Detail","AppRoutes","pages_Main","react","fallback","Switch","Route","exact","path","render","combineReducers","arguments","length","undefined","action","type","ACTIONS","helloResult","rootReducer","initialState","store","compose","applyMiddleware","thunk","createStore","finalCreateStore","App","es","HashRouter","src_AppRoutes","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","src_App","document","getElementById","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","r","__webpack_exports__","d","SET_LOADING_STATUS","SET_HELLO_RESULT"],"mappings":"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","file":"static/js/main.9e44167e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as homeActions from \"../redux/actions/home_action\";\r\nimport { message } from 'antd';\r\nclass PostMessages extends React.Component {\r\n  componentDidMount() {\r\n    window.addEventListener(\"invoke-message\", e => {\r\n      setTimeout(() => {\r\n        message.info(\"后台已回调 ---- 回调参数：\" + JSON.stringify(e.detail));\r\n        this.props.homeActions.setLoadingStatus(false);\r\n        this.props.homeActions.setHelloResult(e.detail);\r\n      }, 3000);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  let { loadingStatus } = state.homeReducer;\r\n  return { loadingStatus };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    homeActions: bindActionCreators(homeActions, dispatch)\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostMessages);\r\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PostMessages from './PostMessages';\nimport * as homeActions from '../redux/actions/home_action';\nimport { Spin } from 'antd';\n\nclass Main extends Component {\n\n  render() {\n    return (\n        <PostMessages>\n          <Spin spinning={this.props.loadingStatus}>\n            {this.props.children}\n          </Spin>\n        </PostMessages>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  let { loadingStatus } = state.homeReducer;\n  return {\n    loadingStatus\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    homeActions: bindActionCreators(homeActions, dispatch),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(Main))\n","import React, { Component, Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom'; // Redirect, withRouter, matchPath\n\nimport Main from './pages/Main';\nconst Home = lazy(() => import('./pages/Home'));\nconst Login = lazy(() => import('./pages/Login'));\nconst Detail = lazy(() => import('./pages/Detail'));\n\n// const AppRoutes = () => {\nclass AppRoutes extends Component {\n  render() {\n    return (\n      <Main>\n        <Suspense fallback={<div />}>\n            <Switch>\n              <Route exact path='/' render={props => <Home {...props} />} />\n              <Route path='/login' render={props => <Login {...props} />} />\n              <Route path='/detail' render={props => <Detail {...props} />} />\n            </Switch>\n        </Suspense>\n      </Main>\n    )\n  }\n}\n\nexport default AppRoutes\n","import { combineReducers } from 'redux';\nimport * as ACTIONS from '../actions/home_action';\n\nvar loadingStatus = function(state = false, action){\n  switch (action.type) {\n    case ACTIONS.SET_LOADING_STATUS:\n      return action.loadingStatus;\n    default:\n      return state;\n  }\n}\n\nvar helloResult = function(state = null, action) {\n  switch (action.type) {\n    case ACTIONS.SET_HELLO_RESULT:\n      return action.helloResult;\n    default:\n      return state;\n  }\n}\n\nconst homeReducer = combineReducers({\n    loadingStatus,\n    helloResult\n})\n\nexport default homeReducer;\n","import { combineReducers } from 'redux';\n\nimport homeReducer from './home_reducer';\n\nconst rootReducer = combineReducers({\n  homeReducer\n});\n\nexport default rootReducer;","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport AppRoutes from './AppRoutes';\nimport configureStore from './redux/store/configureStore';\n\nvar store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <AppRoutes />\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst finalCreateStore = compose(\n  applyMiddleware(thunk)\n)(createStore)\n\nexport default function configureStore(initialState) {\n  const store = finalCreateStore(rootReducer, initialState)\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers')\n      store.replaceReducer(nextRootReducer)\n    })\n  }\n\n  return store\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\n// import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/index.scss';\nimport './less/index.less';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const SET_LOADING_STATUS = 'SET_LOADING_STATUS';\nexport const SET_HELLO_RESULT = 'SET_HELLO_RESULT';\n\nexport function setLoadingStatus(loadingStatus) {\n    return {\n        type: SET_LOADING_STATUS,\n        loadingStatus\n    }\n}\n\nexport function setHelloResult(helloResult) {\n    return {\n        type: SET_HELLO_RESULT,\n        helloResult\n    }\n}"],"sourceRoot":""}